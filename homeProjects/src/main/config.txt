// DatabaseConfig.java
package com.yourname.houseprojects.config;

public class DatabaseConfig {
    private static final String URL = "jdbc:postgresql://localhost:5432/house_projects";
    private static final String USER = "${db.user}"; // From properties file
    private static final String PASSWORD = "${db.password}"; // From properties file
    
    public static String getUrl() { return URL; }
    public static String getUser() { return USER; }
    public static String getPassword() { return PASSWORD; }
}

// YNABConfig.java
package com.yourname.houseprojects.config;

public class YNABConfig {
    private static final String BASE_URL = "https://api.youneedabudget.com/v1/";
    private static final String API_KEY = "${ynab.api.key}"; // From properties file
    private static final String BUDGET_ID = "${ynab.budget.id}"; // From properties file
    
    public static String getBaseUrl() { return BASE_URL; }
    public static String getApiKey() { return API_KEY; }
    public static String getBudgetId() { return BUDGET_ID; }
}

// application.properties
db.url=jdbc:postgresql://localhost:5432/house_projects
db.user=your_username
db.password=your_password

ynab.api.key=your_api_key
ynab.budget.id=your_budget_id

// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.yourname</groupId>
    <artifactId>house-project-tracker</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Retrofit for YNAB API -->
        <dependency>
            <groupId>com.squareup.retrofit2</groupId>
            <artifactId>retrofit</artifactId>
            <version>2.9.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.retrofit2</groupId>
            <artifactId>converter-gson</artifactId>
            <version>2.9.0</version>
        </dependency>

        <!-- PostgreSQL JDBC Driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.7.1</version>
        </dependency>

        <!-- JUnit for testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.9.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>

// First, you'll need these dependencies in your pom.xml:
/*
<dependencies>
    <dependency>
        <groupId>com.squareup.retrofit2</groupId>
        <artifactId>retrofit</artifactId>
        <version>2.9.0</version>
    </dependency>
    <dependency>
        <groupId>com.squareup.retrofit2</groupId>
        <artifactId>converter-gson</artifactId>
        <version>2.9.0</version>
    </dependency>
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>42.7.1</version>
    </dependency>
</dependencies>
*/

import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.http.*;
import java.sql.*;
import java.util.*;

// Basic project class
class Project {
    private int id;
    private String name;
    private String status;
    private double estimatedCost;
    private String ynabTransactionId;
    private Date startDate;
    private Date completionDate;

    // Constructor
    public Project(String name, double estimatedCost) {
        this.name = name;
        this.estimatedCost = estimatedCost;
        this.status = "PLANNED";
        this.startDate = new Date();
    }

    // Getters and setters
}

// YNAB API interface
interface YNABApi {
    @GET("budgets/{budget_id}/transactions")
    Call<Map<String, Object>> getTransactions(
        @Header("Authorization") String token,
        @Path("budget_id") String budgetId
    );

    @POST("budgets/{budget_id}/transactions")
    Call<Map<String, Object>> createTransaction(
        @Header("Authorization") String token,
        @Path("budget_id") String budgetId,
        @Body Map<String, Object> transaction
    );
}

// Database Service
class DatabaseService {
    private static final String URL = "jdbc:postgresql://localhost:5432/house_projects";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";

    public void initializeDatabase() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            try (Statement stmt = conn.createStatement()) {
                // Create projects table
                stmt.execute("""
                    CREATE TABLE IF NOT EXISTS projects (
                        id SERIAL PRIMARY KEY,
                        name VARCHAR(255) NOT NULL,
                        status VARCHAR(50),
                        estimated_cost DECIMAL(10,2),
                        ynab_transaction_id VARCHAR(255),
                        start_date DATE,
                        completion_date DATE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void saveProject(Project project) {
        String sql = """
            INSERT INTO projects (name, status, estimated_cost, start_date)
            VALUES (?, ?, ?, ?)
        """;
        
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            
            pstmt.setString(1, project.getName());
            pstmt.setString(2, project.getStatus());
            pstmt.setDouble(3, project.getEstimatedCost());
            pstmt.setDate(4, new java.sql.Date(project.getStartDate().getTime()));
            
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

// YNAB Service
class YNABService {
    private static final String BASE_URL = "https://api.youneedabudget.com/v1/";
    private static final String API_KEY = "your_ynab_api_key"; // You'll get this from YNAB
    private final YNABApi api;
    
    public YNABService() {
        Retrofit retrofit = new Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build();
            
        api = retrofit.create(YNABApi.class);
    }
    
    public String createExpense(String projectName, double amount) {
        Map<String, Object> transaction = new HashMap<>();
        transaction.put("amount", Math.round(amount * 1000)); // YNAB uses milliunits
        transaction.put("payee_name", projectName);
        transaction.put("memo", "House Project Expense");
        
        try {
            Response<Map<String, Object>> response = api.createTransaction(
                "Bearer " + API_KEY,
                "your_budget_id", // You'll get this from YNAB
                transaction
            ).execute();
            
            if (response.isSuccessful() && response.body() != null) {
                Map<String, Object> data = response.body();
                // Extract and return the transaction ID
                return data.get("id").toString();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
}

// Main class to demonstrate usage
public class HouseProjectTracker {
    private DatabaseService dbService;
    private YNABService ynabService;
    
    public HouseProjectTracker() {
        dbService = new DatabaseService();
        ynabService = new YNABService();
        
        // Initialize database
        dbService.initializeDatabase();
    }
    
    public void addNewProject(String name, double estimatedCost) {
        // Create project
        Project project = new Project(name, estimatedCost);
        
        // Save to database
        dbService.saveProject(project);
        
        // Create YNAB transaction
        String transactionId = ynabService.createExpense(name, estimatedCost);
        
        System.out.println("Project created with YNAB transaction: " + transactionId);
    }
    
    public static void main(String[] args) {
        HouseProjectTracker tracker = new HouseProjectTracker();
        tracker.addNewProject("Paint Living Room", 500.00);
    }
}

